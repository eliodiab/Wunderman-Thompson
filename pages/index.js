import Head from "next/head";
import styles from "../styles/Home.module.scss";
import { useState, useRef } from "react";
import axios from "axios";
import ProductList from "../components/products/productList";
import { MdRefresh } from "react-icons/md";
import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";
import { GoArrowSmallLeft, GoArrowSmallRight } from "react-icons/go";

export default function Home(props) {
  const { products } = props;
  const [filteredProducts, setFilteredProducts] = useState(products);
  const [activeFilters, setActiveFilters] = useState([]);
  const [inputSearch, setInputSearch] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const productsPerPage = 8;
  const productsContainer = useRef(null);

  const checkBoxFilters = [
    ...new Set(products.map((product) => product.category)),
  ];

  const lastProductIndex = productsPerPage * currentPage;
  const firstProductIndex = lastProductIndex - productsPerPage;
  const currentProducts = filteredProducts.slice(
    firstProductIndex,
    lastProductIndex
  );

  const numberOfPages = [];
  for (
    let i = 1;
    i <= Math.ceil(filteredProducts.length / productsPerPage);
    i++
  ) {
    numberOfPages.push(i);
  }

  const setSearchInput = (evt) => {
    setInputSearch(evt.target.value);
  };

  const handleSearch = (evt) => {
    evt.preventDefault();
    setActiveFilters([]);
    setCurrentPage(1);
    const filteredProducts = products.filter(
      (product) =>
        product.title
          .toLowerCase()
          .includes(inputSearch.toLowerCase().trim()) ||
        product.description
          .toLowerCase()
          .includes(inputSearch.toLowerCase().trim())
    );
    if (inputSearch === "") {
      setFilteredProducts(products);
    } else {
      setFilteredProducts(filteredProducts);
    }
  };

  const handleCheck = (evt) => {
    setInputSearch("");
    if (evt.target.checked) {
      setActiveFilters([...activeFilters, evt.target.value]);
    } else {
      const filters = activeFilters.filter(
        (filter) => filter != evt.target.value
      );
      setActiveFilters(filters);
    }
  };

  const handleFilter = () => {
    const filteredProducts = products.filter((product) =>
      activeFilters.some((filter) => filter == product.category)
    );
    setFilteredProducts(filteredProducts.length ? filteredProducts : products);
    setCurrentPage(1);
  };

  const changePage = (pageNumber) => {
    if (pageNumber == 0 || pageNumber > numberOfPages.length) return;
    productsContainer.current.scrollIntoView({
      behavior: "smooth",
    });
    setCurrentPage(pageNumber);
  };

  const clear = () => {
    setActiveFilters([]);
    setInputSearch("");
    setCurrentPage(1);
    setFilteredProducts(products);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Products</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.filtersContainer}>
          <div className={styles.titleAndClearContainer}>
            <h4>Products</h4>
            <button onClick={clear}>
              <AiOutlineClose />
              Clear
            </button>
          </div>
          <form className={styles.searchContainer} onSubmit={handleSearch}>
            <input
              id="search"
              type="text"
              value={inputSearch}
              placeholder="Search"
              onChange={setSearchInput}
            />
            <button className={styles.searchButton} type="submit">
              <AiOutlineSearch />
            </button>
          </form>

          <div className={styles.checkBoxesContainer}>
            {checkBoxFilters.map((item, index) => (
              <div className={styles.checkBox} key={index}>
                <input
                  value={item}
                  type="checkbox"
                  id={item}
                  checked={activeFilters.includes(item)}
                  onChange={handleCheck}
                />
                <label htmlFor={item}>{item}</label>
              </div>
            ))}
          </div>

          <button onClick={handleFilter} className={styles.filterButton}>
            <MdRefresh />
            Filter
          </button>
        </div>
        <div className={styles.productsInfo} ref={productsContainer}>
          <div className={styles.emptyContainer}></div>
          <div className={styles.results}>
            Results: {filteredProducts.length}
          </div>
          <ProductList products={currentProducts} />
          <div className={styles.pagination}>
            <GoArrowSmallLeft onClick={() => changePage(currentPage - 1)} />
            {numberOfPages.map((page) => {
              return (
                <button
                  className={currentPage == page ? styles.activePage : ""}
                  key={page}
                  onClick={() => changePage(page)}
                >
                  {page}
                </button>
              );
            })}
            <GoArrowSmallRight onClick={() => changePage(currentPage + 1)} />
          </div>
        </div>
      </main>
    </div>
  );
}

//this function is used to pre fetch data so the results will appear in the page source which is better for SEO
export async function getStaticProps() {
  const response = await axios
    .get("https://dummyjson.com/products")
    .then((response) => {
      return response.data.products;
    })
    .catch((error) => {
      console.warn(error);
    });
  return {
    props: {
      products: response,
    },
  };
}
